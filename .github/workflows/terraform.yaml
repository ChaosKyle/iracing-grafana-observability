# File: .github/workflows/terraform.yml
name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments/dev
    
    env:
      TF_VAR_grafana_auth: ${{ secrets.GRAFANA_AUTH }}
      TF_VAR_grafana_admin_pass: ${{ secrets.GRAFANA_ADMIN_PASS }}
      TF_VAR_influxdb_admin_password: ${{ secrets.INFLUXDB_ADMIN_PASSWORD }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Validate the Terraform code
    - name: Terraform Validate
      run: terraform validate

    # Generate Terraform plan for pull requests
    - name: Terraform Plan
      run: terraform plan -no-color
      if: github.event_name == 'pull_request'

    # Apply Terraform changes for main branch or scheduled runs
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')
      run: terraform apply -auto-approve

# File: .github/workflows/python-ci.yml
name: Python CI

on:
  push:
    branches: [ main ]
    paths:
      - 'python/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'python/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements.txt
    
    - name: Run data collection
      run: |
        python python/collectors/iracing_collector.py
    
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: collection-logs
        path: iracing_collector.log

# File: .github/workflows/dashboard-validator.yml
name: Dashboard Validator

on:
  push:
    branches: [ main ]
    paths:
      - 'dashboards/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'dashboards/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pyyaml
    
    - name: Validate JSON dashboards
      run: |
        python python/utils/dashboard_validator.py dashboards/
    
    - name: Check dashboard IDs for uniqueness
      run: |
        python python/utils/check_dashboard_ids.py dashboards/

# File: .github/workflows/docker-build.yml
name: Docker Build & Push

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push collector image
      uses: docker/build-push-action@v4
      with:
        context: ./docker/collector
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ghcr.io/${{ github.repository }}/iracing-collector:latest
          ghcr.io/${{ github.repository }}/iracing-collector:${{ github.sha }}
    
    - name: Build and push dashboard image
      uses: docker/build-push-action@v4
      with:
        context: ./docker/dashboard
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ghcr.io/${{ github.repository }}/iracing-dashboard:latest
          ghcr.io/${{ github.repository }}/iracing-dashboard:${{ github.sha }}
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r python/requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 python/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 python/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest python/tests/

# File: .github/workflows/data-collection.yml
name: iRacing Data Collection

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Manual trigger

jobs:
  collect-data:
    runs-on: ubuntu-latest
    
    env:
      IRACING_USERNAME: ${{ secrets.IRACING_USERNAME }}
      IRACING_PASSWORD: ${{ secrets.IRACING_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      INFLUXDB_URL: ${{ secrets.INFLUXDB_URL }}
      INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN }}
      INFLUXDB_ORG: ${{ secrets.INFLUXDB_ORG }}
      INFLUXDB_BUCKET: ${{ secrets.INFLUXDB_BUCKET }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |